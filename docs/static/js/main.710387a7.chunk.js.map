{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAIzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCVnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,uBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,OAAf,UACI,qBAAKC,IAAOf,EAAMgB,IAAMN,IACxB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAMtB,ECRwB,SAAEA,GAE1B,MAA4Bd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAmBA,OAdAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAX,GAEFY,YAAW,WACPH,EAAS,CACLf,KAAMM,EACNO,SAAS,MAEd,UAGZ,CAACpB,IAEGqB,EDb0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAgCrB,OACI,qCACI,mCAAOpB,EAAP,OACEoB,GAAW,mBAAGJ,UAAU,qCAAb,qBACb,qBAAKA,UAAU,YAAf,SAKQH,EAAOJ,KAAI,SAAAkB,GACP,OAAO,cAAC,EAAD,eAEEA,GADGA,EAAMhB,aEf3BiB,EAnCM,WAGjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MClBlC8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.710387a7.chunk.js","sourcesContent":["import React, { useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    // useState() es undefined y da error\r\n    // para que este vacio dejar ''\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(\"Submit hecho\");\r\n        if ( inputValue.trim().length > 2) {\r\n            setCategories(cats => [ inputValue, ...cats ])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value= { inputValue }\r\n                onChange= { handleInputChange }\r\n            />  \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=43zz8Qh4Dl48Ja5z8ghcHMUZ2wYwzbIu&q=${ encodeURI(category) }}&limit=10`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <img src= { url } alt={ title } />\r\n            <p> { title } </p>        \r\n        </div>\r\n    )\r\n}\r\n","//import React, {useState, useEffect} from 'react'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const [count, setCount] = useState(0);\r\n\r\n    //const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    /*\r\n    -- se lleva al hok custom\r\n    useEffect(() => {\r\n        //getGifs();\r\n        getGifs( category )\r\n            .then( setImages );\r\n    }, [ category ]);\r\n    */\r\n\r\n    /*\r\n    -- Se lleva al helper\r\n    const getGifs = async() => {\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=43zz8Qh4Dl48Ja5z8ghcHMUZ2wYwzbIu&q=${ encodeURI(category) }}&limit=10`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map(img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        });\r\n\r\n        //console.log(gifs);\r\n        setImages(gifs);\r\n    }*/\r\n\r\n    //getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3> { category } </h3>\r\n            { loading && <p className=\" animate__animated animate__flash \">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    /*images.map(image => {\r\n                        return <li key={image.id}>{image.title}</li>;\r\n                    })*/\r\n                    images.map(image => {\r\n                        return <GifGridItem \r\n                            key = { image.id }\r\n                            { ...image } />\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n\r\n    /*\r\n    <h3>{count}</h3>\r\n            <button onClick={() => setCount(count + 1)}/>\r\n     */\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(images => {\r\n\r\n                setTimeout(() => {\r\n                    setState({\r\n                        data: images,\r\n                        loading: false\r\n                    });\r\n                }, 3000);\r\n\r\n            });\r\n    }, [category]);\r\n\r\n    return state; // { data: [], loading: true }\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samuai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /*const handleAdd = () => {\r\n        //setCategories( ...categories, 'Quinto elemento' );\r\n        setCategories( categories => [ ...categories, 'Quinto elemento'] );\r\n    }*/\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n    /*\r\n                categories.map(category => {\r\n                        return <li key={ category }> { category } </li>\r\n                    })\r\n     */\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}